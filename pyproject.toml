[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "atria_ml"
version = "0.0.0"                                                                                                    
description = "Atria ML: A collection of machine learning models and utilities for the Atria ecosystem."
readme = "README.md"
requires-python = "==3.11.*"
license = { file = "LICENSE.txt" }
authors = [{ name = "Saifullah", email = "saifullah.saifullah@dfki.de" }]
dependencies = [
    "atria-core",
    "atria-datasets",
    "atria-hub",
    "atria-models",
    "atria-registry",
    "atria-transforms",
    "anls>=0.0.2",
    "diffusers>=0.34.0",
    "mmcv==2.1.0",
    "mmdet==3.3.0",
    "pytorch-ignite>=0.5.2",
    "textdistance>=4.6.3",
    "timm>=1.0.17",
    "transformers>=4.37.0",
    "tensorboardx>=2.6.4",
    "torchinfo>=1.8.0",
    "h5py>=3.14.0",
    "atria-metrics",
]



[tool.hatch.metadata]
allow-direct-references = true
test = ["coverage", "pytest"]

[tool.coverage.report]
skip_covered = true
show_missing = true
precision = 2
exclude_lines = [
    'def __repr__',
    'pragma= no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING=',
    'if typing.TYPE_CHECKING=',
    '@overload',
    '@typing.overload',
    '\(Protocol\)=$',
    'typing.assert_never',
    'assert_never',
    'if __name__ == "__main__":',
]

## Linter and formatter
[tool.ruff]
# cover and extend the default config in https=//docs.astral.sh/ruff/configuration/
extend-exclude = ["alembic"]
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "W191",   # indentation contains tabs
    "B904",   # Allow raising exceptions without from e, for HTTPException
    "COM819", # Trailing comma prohibited
    "D100",   # Missing docstring in public module(file)
    "D104",   # Missing docstring in public package
    "D203",   # 1 blank line required before class docstring
    "E201",   # Whitespace after '('
    "E202",   # Whitespace before ')'
    "E203",   # Whitespace before '='
    "E221",   # Multiple spaces before operator
    "E241",   # Multiple spaces after ','
    "E251",   # Unexpected spaces around keyword / parameter equals
    "W291",   # Trailing whitespace
    "W293",   # Blank line contains whitespace
]

isort = { combine-as-imports = true,  split-on-trailing-comma = false }

# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

[project.urls]
"Homepage" = "https://github.com/saifullah3396/atria/"
"Bug Reports" = "https://github.com/saifullah3396/atria/"
"Source" = "https://github.com/saifullah3396/atria/"

[tool.pytest.ini_options]
pythonpath = [".", "src", "tests"]
# Set additional command line options for pytest
# Ref: https://docs.pytest.org/en/stable/reference/reference.html#command-line-flags
addopts = "-rXs --strict-config --strict-markers --tb=short"
xfail_strict = true         # Treat tests that are marked as xfail but pass as test failures
# filterwarnings = ["error"]  # Treat all warnings as errors

[tool.uv]
managed = true
default-groups = ["torch-gpu"]
conflicts = [
  [
    { group = "torch-cpu" },
    { group = "torch-gpu" },
  ],
]
[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", group = "torch-cpu"},
  { index = "pytorch-cu121", group = "torch-gpu" },
]
torchvision = [
  { index = "pytorch-cpu", group = "torch-cpu"},
  { index = "pytorch-cu121", group = "torch-gpu" },
]
mmcv = { url = "https://download.openmmlab.com/mmcv/dist/cu121/torch2.1.0/mmcv-2.1.0-cp311-cp311-manylinux1_x86_64.whl" }
datadings = { git = "https://github.com/saifullah3396/datadings.git" }
atria-registry = { path = "../atria_registry", editable = true }
atria-models = { path = "../atria_models", editable = true }
atria-hub = { path = "../atria_hub", editable = true }
atria-core = { path = "../atria_core", editable = true }
atria-transforms = { path = "../atria_transforms", editable = true }
atria-datasets = { path = "../atria_datasets", editable = true }
atria-metrics = { path = "../atria_metrics", editable = true }

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
explicit = true

[dependency-groups]
dev = [
    "coverage>=7.9.2",
    "mypy>=1.16.1",
    "pytest>=8.4.1",
    "ruff>=0.12.2",
    "ipykernel>=6.28.1",
]
torch-cpu = [
  "torch==2.1.2",
  "torchvision==0.16.2",
]
torch-gpu = [
  "torch==2.1.2",
  "torchvision==0.16.2",
]

[tool.mypy]
disable_error_code = ["import-untyped", "import-not-found"]
